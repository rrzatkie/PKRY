/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupsignature;


import Prime.AKS;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author rafal
 */
public class GUI extends javax.swing.JFrame {

    
    public static int lp = 16;
    public static int k = 256;
    public static int lx = 256;
    public static int le = 256;
    public static int lE = 512;
    public static int lX = 512;
    public static int eps = 1;
    

    private static final BigInteger TWO = new BigInteger("2");
    private static boolean isPrimeP = false;
    private static boolean isPrimeQ = false;
    private static BigInteger p_;
    private static BigInteger q_;
    private static BigInteger p;
    private static BigInteger q;
    private static BigInteger n;
    private static BigInteger g;
    private static BigInteger a;
    private static BigInteger a_o;
    private static BigInteger g_;
    private static BigInteger h;
    private static BigInteger b;
    private static BigInteger x;
    private static BigInteger r;
    private static BigInteger C1;
    
    private static String sp_ , gpsk_ , proof_ , gmsk_ , proof2_;
    
    private static BigInteger t1;
    private static BigInteger t2;
    private static BigInteger D;
    private static BigInteger c;
    private static BigInteger s1;
    private static BigInteger s2;
    private static BigInteger D_;
    private static BigInteger alfa;
    private static BigInteger beta;
    
    private static BigInteger C2;
    private static String[] V_;
    private static String[] W_;
    private static BigInteger c_11;
    private static BigInteger s_1;
    private static BigInteger c_22;
    private static BigInteger s11;
    private static BigInteger s22;
    private static BigInteger s33;
    private static BigInteger t_;
    private static BigInteger c_33;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.setVisible(true);
        this.setTitle("Group Manager");
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("SETUP");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("JOIN1");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("VERIFY");

        jButton4.setText("OPEN");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton5.setText("JOIN2");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel4.setText("LOG");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList2);

        jLabel3.setText("Members");

        jLabel5.setText("Files to Verify");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 44, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(30, 138, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       
        jTextArea1.append("---------------SETUP---------------\n");
        do{  
            while(!isPrimeQ){
                q_=genQ_(lp);
                q =  q_.multiply(TWO).add(BigInteger.ONE);
                AKS IsPrimeTest2 = new AKS(q);
                isPrimeQ = IsPrimeTest2.isPrime();
            }
            p_=genP_(lp);
            p =  p_.multiply(TWO).add(BigInteger.ONE);
            AKS IsPrimeTest1 = new AKS(p);
            isPrimeP = IsPrimeTest1.isPrime();
        }
        while(!isPrimeP || !isPrimeQ);
        
        n = p.multiply(q);
        g = genG(n, lp);
        a = g.modPow(TWO, n);
        a_o = genA_0(lp, a);
        g_= genG_(lp, a, a_o);
        h = genH(lp, a, a_o, g_);
        b = genB(lp, a, a_o, g_, h);
        
        StringBuilder sp = new StringBuilder();
        sp.append(Integer.toBinaryString(lp)).append("%")
                .append(Integer.toBinaryString(k)).append("%")
                .append(Integer.toBinaryString(lx)).append("%")
                .append(Integer.toBinaryString(le)).append("%")
                .append(Integer.toBinaryString(lE)).append("%")
                .append(Integer.toBinaryString(lX)).append("%")
                .append(Integer.toBinaryString(eps)).append("%");
        try {
            createFile(sp.toString() , "secureparam.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        StringBuilder gpsk = new StringBuilder();
        gpsk.append(n.toString(2)).append("%")
                .append(a.toString(2)).append("%")
                .append(a_o.toString(2)).append("%")
                .append(g_.toString(2)).append("%")
                .append(h.toString(2)).append("%")
                .append(b.toString(2)).append("%");
        StringBuilder gmsk = new StringBuilder();
        
        gmsk.append(p_.toString(2)).append("%")
                .append(q_.toString(2)).append("%");
        
        try {
            createFile(gpsk.toString() , "gpsk.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try {
            createFile(gmsk.toString() , "gmsk.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jTextArea1.append("p_= " + p_ + "\n");
        jTextArea1.append("q_= " + q_ + "\n");
        jTextArea1.append("p= " + p + "\n");
        jTextArea1.append("q= " + q + "\n");
        jTextArea1.append("n= " + n + "\n");
        jTextArea1.append("g= " + g + "\n");
        jTextArea1.append("a= " + a + "\n");
        jTextArea1.append("a_o= " + a_o + "\n");
        jTextArea1.append("g_= " + g_ + "\n");
        jTextArea1.append("h= " + h + "\n");
        jTextArea1.append("b= " + b + "\n");
        
        
        
        
//        System.out.println("p_= " + p_);
//        System.out.println("q_= " + q_);
//        System.out.println("p= " + p);
//        System.out.println("q= " + q);
//        System.out.println("n= " + n);
//        System.out.println("g= " + g);
//        System.out.println("a= " + a);
//        System.out.println("a_o= " + a_o);
//        System.out.println("g_= " + g_);
//        System.out.println("h= " + h);
//        System.out.println("b= " + b);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
         jTextArea1.append("---------------JOIN1---------------\n");
        
        try {
            gmsk_ = getFile("gmsk.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String gmsk[] = gmsk_.split("%");
        p_ = new BigInteger(gmsk[0] , 2);
        q_ = new BigInteger(gmsk[1] , 2);
        
        try {
            sp_ = getFile("secureparam.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sp[] = sp_.split("%");
        lp = Integer.parseInt(sp[0] , 2);
        k = Integer.parseInt(sp[1] , 2);
        lx = Integer.parseInt(sp[2] , 2);
        le = Integer.parseInt(sp[3] , 2);
        lE = Integer.parseInt(sp[4] , 2);
        lX = Integer.parseInt(sp[5] , 2);
        eps = Integer.parseInt(sp[6] , 2);
        
        try {
            gpsk_ = getFile("gpsk.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String gpsk[] = gpsk_.split("%");
        n = new BigInteger(gpsk[0] , 2);
        a = new BigInteger(gpsk[1] , 2);
        a_o = new BigInteger(gpsk[2] , 2);
        g_ = new BigInteger(gpsk[3] , 2);
        h = new BigInteger(gpsk[4] , 2);
        b = new BigInteger(gpsk[5] , 2);
        
         try {
            proof_ = getFile("proof.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        String proof[] = proof_.split("#");
        C1 = new BigInteger(proof[1] , 16);
        
        String U[] = proof[0].split("%");
        c = new BigInteger(U[0] , 16);
        s1 = new BigInteger(U[1] , 16);
        s2 = new BigInteger(U[2] , 16);
        
        if (checkIfQRn(C1 , p_ , q_) == true)
        {
            jTextArea1.append("C1 nalezy do QR(n)\n");
        }
        else 
            jTextArea1.append("C1 nie należy do QR(n)\n");
        
        D_= (g_.modPow(s1, n)
                .multiply(h.modPow(s2, n))
                .multiply(C1.modPow(c, n)))
                .mod(n);
        StringBuilder c_2 = new StringBuilder();
        c_2.append(g_.toString(2))
                .append(h.toString(2))
                .append(C1.toString(2))
                .append(D_.toString(2));
        
        
        
        
        
        MessageDigest mda = null;
        try {
            mda = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] coded = mda.digest(c_2.toString().getBytes());
        
        if(checkIfS1(s1,lx,k,eps) && checkIfS2(s2, lp, k, eps))
        {
            jTextArea1.append("s1 i s2 nalezy do przedzialu. sukces\n" );
        }
        else {
            jTextArea1.append("s1 i s2 nie nalezy do przedzialu. brak sukcesu\n");
        }
        
        alfa = genAlfa(lx);
        beta = genBeta(lx);
        
        StringBuilder alfabeta = new StringBuilder();
        alfabeta.append(alfa.toString(2)).append("%")
                .append(beta.toString(2));
        try {
            createFile(alfabeta.toString() , "alfabeta.txt" );
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextArea1.append("p_= " + p_ + "\n");
        jTextArea1.append("q_= " + q_ + "\n");
        jTextArea1.append("C1= " + C1 + "\n");
        jTextArea1.append("c= " + c + "\n");
        jTextArea1.append("s1= " + s1 + "\n");
        jTextArea1.append("s2= " + s2 + "\n");
        jTextArea1.append("c_22 = " + new BigInteger(coded) + "\n");
        jTextArea1.append("alfa= " + alfa + "\n");
        jTextArea1.append("beta= " + beta + "\n");
        
//        System.out.println("p_= " + p_);
//        System.out.println("q_= " + q_);
//        System.out.println("C1= " + C1); 
//        System.out.println("c= " + c);
//        System.out.println("s1= " + s1);
//        System.out.println("s2= " + s2);
//        System.out.println("c_22 = " + new BigInteger(coded));
//        System.out.println("alfa= " + alfa);
//        System.out.println("beta= " + beta);
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        jTextArea1.append("---------------JOIN2---------------\n");
       
        try {
            proof2_ = getFile("proof2.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String[] proof2 = proof2_.split("#");
        C2 = new BigInteger(proof2[0] , 2);
        
        V_ = proof2[1].split("%");
        c_11 = new BigInteger(V_[0]);
        s_1 = new BigInteger(V_[1]);
        
        W_ = proof2[2].split("%");
        c_22 = new BigInteger(W_[0] , 2);
        s11 = new BigInteger(W_[1] , 2);
        s22 = new BigInteger(W_[2] , 2);
        s33 = new BigInteger(W_[3] , 2);
        
        if(checkIfQRn(C2 , p_ , q_))
            System.out.println("C2 nalezy do QR(n)");
        else
            System.out.println("C2 nie nalezy do QR(n)");
        
        t_ = (C2.modPow(c_11, n)
                .multiply(a.modPow(s_1, n)))
                .mod(n);
        StringBuilder c_ = new StringBuilder();
        c_.append(a.toString(2))
                .append(g_.toString(2))
                .append(C2.toString(2))
                .append(t_.toString(2));
        MessageDigest mda = null;
        try {
            mda = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        byte[] coded = mda.digest(c_.toString().getBytes());
        c_33 = new BigInteger(coded);
         jTextArea1.append("c_11= " + c_11.toString() + "\n");
        jTextArea1.append("c_22= " + c_22.toString() + "\n");
        jTextArea1.append("s11= " + s11.toString() + "\n");
        jTextArea1.append("s22= " + s22.toString() + "\n");
        jTextArea1.append("s33= " + s33.toString() + "\n");
        jTextArea1.append("c_33= " + c_33 + "\n");
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

public static String getFile(String filePath) throws IOException {
        Path file = Paths.get(filePath);
        if (file.toFile().exists()) {
            byte[] encoded = Files.readAllBytes(file);
            return new String(encoded, StandardCharsets.UTF_8);
        } else {
            return null;
        }
    }
public static void createFile(String data, String fileName) throws IOException {
        File file = new File(fileName);
        Files.write(file.toPath(), data.getBytes());
    }
    public static BigInteger genG(BigInteger n, int l)
    {
        BigInteger temp = null;
        do { temp = new BigInteger(l , new Random());
}
        while(!(n.gcd(temp.add(BigInteger.ONE)).equals(BigInteger.ONE)) &&
                n.gcd(temp.subtract(BigInteger.ONE))!= BigInteger.ONE &&
                !(temp.compareTo(n.subtract(BigInteger.ONE)) <= 0) );
        
        return temp;
    }
    public static BigInteger genP_(int l)
    {
        BigInteger rnd = null;
        boolean isPrime = false;

        while (!isPrime) {
            rnd = new BigInteger(l, 100, new Random());
            AKS IsPrimeTest = new AKS(rnd);
            isPrime = IsPrimeTest.isPrime();
        }
        return rnd; 
    }
    public static BigInteger genQ_(int l)
    {
        BigInteger rnd = null;
        boolean isPrime = false;

        while (!isPrime) {
            rnd = new BigInteger(l, 100, new Random());
            AKS IsPrimeTest = new AKS(rnd);
            isPrime = IsPrimeTest.isPrime();
        }
        return rnd; 
    }

    private static BigInteger genA_0(int l, BigInteger a) {
      BigInteger temp = null;
        do { temp = new BigInteger(l , new Random());}
        while(!(n.gcd(temp.add(BigInteger.ONE)).equals(BigInteger.ONE)) &&
                n.gcd(temp.subtract(BigInteger.ONE))!= BigInteger.ONE &&
                !(temp.compareTo(n.subtract(BigInteger.ONE)) <= 0) &&
                temp.equals(a));
                
       
        return temp;
    }

    private static BigInteger genG_(int l, BigInteger a, BigInteger a_o) {
        BigInteger temp = null;
        do { temp = new BigInteger(l , new Random());}
        while(!(n.gcd(temp.add(BigInteger.ONE)).equals(BigInteger.ONE)) &&
                n.gcd(temp.subtract(BigInteger.ONE))!= BigInteger.ONE &&
                !(temp.compareTo(n.subtract(BigInteger.ONE)) <= 0) &&
                temp.equals(a) && temp.equals(a_o));
        
        return temp;
        
    }

    private static BigInteger genH(int l, BigInteger a, BigInteger a_o, BigInteger g_) {
     BigInteger temp = null;
        do { temp = new BigInteger(l , new Random());}
        while(!(n.gcd(temp.add(BigInteger.ONE)).equals(BigInteger.ONE)) &&
                n.gcd(temp.subtract(BigInteger.ONE))!= BigInteger.ONE &&
                !(temp.compareTo(n.subtract(BigInteger.ONE)) <= 0) &&
                temp.equals(a) && temp.equals(a_o) && temp.equals(g_));       
        
        return temp;
        
        
    }

    private static BigInteger genB(int l, BigInteger a, BigInteger a_o, BigInteger g_, BigInteger h) {
      BigInteger temp = null;
        do { temp = new BigInteger(l , new Random());}
        while(!(n.gcd(temp.add(BigInteger.ONE)).equals(BigInteger.ONE)) &&
                n.gcd(temp.subtract(BigInteger.ONE))!= BigInteger.ONE &&
                !(temp.compareTo(n.subtract(BigInteger.ONE)) <= 0) &&
                temp.equals(a) && temp.equals(a_o) && temp.equals(g_) && temp.equals(h));

        
        return temp;
    }
    private boolean checkIfQRn(BigInteger C1, BigInteger p_, BigInteger q_) {
        
        if(C1.gcd(p_).equals(BigInteger.ONE) && C1.gcd(q_).equals(BigInteger.ONE))
            return true;
        else 
        {System.out.println("NWD(C1,p_)= " + C1.gcd(p_));
        System.out.println("NWD(C1,q_)= " + C1.gcd(q_));
            return false;
        }
    }

    private boolean checkIfS1(BigInteger s1, int lx, int k, int eps) {
        int pow = lx + k;
        if(s1.compareTo(TWO.pow(pow).negate()) >= 0
                && s1.compareTo(TWO.pow(pow*eps).subtract(BigInteger.ONE))<=0)
            return true;
        else
            return false;
    }

    private boolean checkIfS2(BigInteger s2, int lp, int k, int eps) {
        int pow = 2*lp + k + 1;
        if(s2.compareTo(TWO.pow(pow).negate()) >= 0
                && s2.compareTo(TWO.pow(pow*eps).subtract(BigInteger.ONE))<=0)
            return true;
        else
            return false;
    }

    private BigInteger genAlfa(int lx) {
        BigInteger temp = null; 
        int pow = lx;
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private BigInteger genBeta(int lx) {
        BigInteger temp = null; 
        int pow = lx;
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

}
