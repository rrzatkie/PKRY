/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupsignature;


import Member.JOIN2;
import static Member.JOIN2.getFile;
import static Member.JOIN2.lx;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author rafal
 */
public class GUI_M extends javax.swing.JFrame {

     public static int lp; 
    public static int k; 
    public static int lx;
    public static int le;
    public static int lE;
    public static int lX;
    public static int eps;

    
    private static final BigInteger TWO = new BigInteger("2");
    
    private static BigInteger n;
    private static BigInteger a;
    private static BigInteger a_o;
    private static BigInteger g_;
    private static BigInteger h;
    private static BigInteger b;
    private static BigInteger x;
    private static BigInteger r;
    private static BigInteger C1;
    private static String sp_ , gpsk_;
    
    private static BigInteger t1;
    private static BigInteger t2;
    private static BigInteger D;
    private static BigInteger c;
    private static BigInteger s1;
    private static BigInteger s2;
    
    private static BigInteger c_;
    private static String U_;
    private String alfabeta_;
    private BigInteger alfa;
    private BigInteger beta;
    private static BigInteger x1;
    private static BigInteger C2;
    private static BigInteger v;
    private static BigInteger r_1;
    private static BigInteger d_1;
    private static BigInteger c_11;
    private static BigInteger s_1;
    private static BigInteger V;
    private static BigInteger r1;
    private static BigInteger r2;
    private static BigInteger r3;
    private static BigInteger d1;
    private static BigInteger d2;
    private static BigInteger c_22;
    private static BigInteger s11;
    private static BigInteger s22;
    private static BigInteger s33;
    
    
    
    /**
     * Creates new form GUI_M
     */
    public GUI_M() {
        initComponents();
        this.setVisible(true);
        this.setTitle("Member");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("JOIN1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("JOIN2");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("SIGN");

        jButton4.setText("EXIT");

        jLabel1.setText("LOG:");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       jTextArea1.append("---------------JOIN1---------------\n");
        try {
            sp_ = getFile("secureparam.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sp[] = sp_.split("%");
        lp = Integer.parseInt(sp[0] , 2);
        k = Integer.parseInt(sp[1] , 2);
        lx = Integer.parseInt(sp[2] , 2);
        le = Integer.parseInt(sp[3] , 2);
        lE = Integer.parseInt(sp[4] , 2);
        lX = Integer.parseInt(sp[5] , 2);
        eps = Integer.parseInt(sp[6] , 2);
        
        try {
            gpsk_ = getFile("gpsk.txt");
        } catch (IOException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String gpsk[] = gpsk_.split("%");
        n = new BigInteger(gpsk[0] , 2);
        a = new BigInteger(gpsk[1] , 2);
        a_o = new BigInteger(gpsk[2] , 2);
        g_ = new BigInteger(gpsk[3] , 2);
        h = new BigInteger(gpsk[4] , 2);
        b = new BigInteger(gpsk[5] , 2);
        
        
        x = genX(lx);
        r = genR(n);
        
        
        
        
       
        C1 = (g_.modPow(x, n)
                .multiply(h.modPow(r, n)))
                .mod(n);
        t1 = genT1(lx , k, eps);
        t2 = genT2(lp , k , eps);
        
     
        D = (g_.modPow(t1, n)
                .multiply(h.modPow(t2, n)))
                .mod(n);
        
        StringBuilder c = new StringBuilder();
        
        c.append(g_.toString(2))
                .append(h.toString(2))
                .append(C1.toString(2))
                .append(D.toString(2));
        
        MessageDigest mda = null;
      
        try {
            mda = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        byte[] coded = mda.digest(c.toString().getBytes());
       
        s1 = t1.subtract(new BigInteger(coded).multiply(x));
        s2 = t2.subtract(new BigInteger(coded).multiply(r));
        
        StringBuilder U = new StringBuilder();
        U.append(new BigInteger(coded).toString(16)).append("%")
                .append(s1.toString(16)).append("%")
                .append(s2.toString(16));
        
        StringBuilder proof = new StringBuilder();
        proof.append(U.toString()).append("#")
                .append(C1.toString(16));
        
        try {
            createFile(proof.toString() , "proof.txt" );
        } catch (IOException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
        
        jTextArea1.append("x= " + x + "\n");
        jTextArea1.append("r= " + r + "\n");
        jTextArea1.append("c= " + c + "\n");
        jTextArea1.append("C1= " + C1 + "\n");
        
        jTextArea1.append("t1= " + t1 + "\n");
        jTextArea1.append("t2= " + t2 + "\n");
        jTextArea1.append("s1= " + s1 + "\n");
        jTextArea1.append("s2= " + s2 + "\n");
        jTextArea1.append("coded= " + new BigInteger(coded) + "\n");
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        jTextArea1.append("---------------JOIN2---------------\n");
        try {
            alfabeta_ = getFile("alfabeta.txt");
        } catch (IOException ex) {
            Logger.getLogger(JOIN2.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] alfabeta = alfabeta_.split("%");
        alfa = new BigInteger(alfabeta[0], 2);
        beta= new BigInteger(alfabeta[1], 2);
        
        x1 =TWO.pow(lx)
                .add((alfa.multiply(x).add(beta)).mod(TWO.pow(lx)));
        C2 = a.modPow(x1, n);
        v = (alfa.multiply(x).add(beta))
               .modPow((TWO.pow(lx).subtract(BigInteger.ONE)).divide(TWO), TWO.pow(lx));
        r_1 = genR_1(lx , k , eps);
        d_1 = a.modPow(r_1, n);
        
        StringBuilder c_1 = new StringBuilder();
        
        c_1.append(a.toString(2))
                .append(g_.toString(2))
                .append(C2.toString(2))
                .append(d_1.toString(2));
        
        MessageDigest mda = null;
      
        try {
            mda = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        byte[] coded = mda.digest(c_1.toString().getBytes());
        c_11 = new BigInteger(coded);
        s_1 = r_1.subtract((c_11.multiply((x1.subtract(TWO.pow(lx))))));
        
        StringBuilder V_ = new StringBuilder();
        V_.append(c_11.toString(2)).append("%")
                .append(s_1.toString(2));
        
        
        
        
        
        r1 = genR1(lx, k, eps);
        r2 = genR2(lx, k, eps);
        r3 = genR3(lp, lx, k, eps);
        
        d1 = a.modPow(r1, n);
        d2 = (g_.modPow(r1, n)
                .multiply(g_.modPow((TWO.pow(lx)).multiply(r2), n))
                .multiply(h.modPow(r3, n)))
                .mod(n);
        StringBuilder c_2 = new StringBuilder();
        c_2.append(a.toString(2))
                .append(g_.toString(2))
                .append(h.toString(2))
                .append(C1.toString(2))
                .append(C2.toString(2))
                .append(d1.toString(2))
                .append(d2.toString(2));
        
        MessageDigest mda2 = null;
        try {
            mda2 = MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] coded2 = mda2.digest(c_2.toString().getBytes());
        c_22 = new BigInteger(coded2);
        s11 = r1.subtract(c_22.multiply(x1.subtract(TWO.pow(lx))));
        s22 = r2.subtract(c_22.multiply(v));
        s33 = r3.subtract(c_22.multiply(alfa.multiply(r)));
        
        StringBuilder W_ = new StringBuilder();
        W_.append(c_22.toString(2)).append("%")
                .append(s11.toString(2)).append("%")
                .append(s22.toString(2)).append("%")
                .append(s33.toString(2));
        StringBuilder proof2_ = new StringBuilder();
        proof2_.append(C2.toString(2)).append("#")
                .append(V_.toString()).append("#")
                .append(W_.toString());
         try {
             createFile(proof2_.toString() , "proof2.txt");
         } catch (IOException ex) {
             Logger.getLogger(GUI_M.class.getName()).log(Level.SEVERE, null, ex);
         }
         jTextArea1.append("c_11= " + c_11.toString() + "\n");
         jTextArea1.append("c_22= " + c_22.toString() + "\n");
         jTextArea1.append("s11= " + s11.toString() + "\n");
         jTextArea1.append("s22= " + s22.toString() + "\n");
         jTextArea1.append("s33= " + s33.toString() + "\n");
         jTextArea1.append("V_= " + V_.toString() + "\n");
         jTextArea1.append("W_= " + W_.toString() + "\n");
        
    }//GEN-LAST:event_jButton2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_M.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_M.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_M.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_M.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_M().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

public static void createFile(String data, String fileName) throws IOException {
        File file = new File(fileName);
        Files.write(file.toPath(), data.getBytes());
    }
    
    public static String getFile(String filePath) throws IOException {
        Path file = Paths.get(filePath);
        if (file.toFile().exists()) {
            byte[] encoded = Files.readAllBytes(file);
            return new String(encoded, StandardCharsets.UTF_8);
        } else {
            return null;
        }
    }

    private static BigInteger genX(int lx) {
        BigInteger temp = null;
        
        do{
            temp = new BigInteger(lx, new Random());
        }
        while(!((temp.compareTo(TWO.pow(lx).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private static BigInteger genR(BigInteger n) {
        BigInteger temp = null;
        do{
            temp = new BigInteger(n.bitLength(), new Random());
        }
        while(!(temp.compareTo(TWO.multiply(n).subtract(BigInteger.ONE)) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO)== 1));
        return temp;
    }
    private static BigInteger genT1(int lx, int k, int eps)
    {
        BigInteger temp = null;
        int pow = eps*(lx + k);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }
    
    private static BigInteger genT2(int lp, int k, int eps)
    {
        BigInteger temp = null;
        int pow = eps*(2*lp + k + 1);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private BigInteger genR_1(int lx, int k, int eps) {
        BigInteger temp = null;
        int pow = eps*(lx + k);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private BigInteger genR1(int lx, int k, int eps) {
        BigInteger temp = null;
        int pow = eps*(lx + k);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private BigInteger genR2(int lx, int k, int eps) {
        BigInteger temp = null;
        int pow = eps*(lx + k);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }

    private BigInteger genR3(int lp, int lx, int k, int eps) {
        BigInteger temp = null;
        int pow = eps*(2*lp + k + 1);
       
        do{
            temp = new BigInteger(pow, new Random());
        }
        while(!((temp.compareTo(TWO.pow(pow).subtract(BigInteger.ONE))) <= 0 )
                && !(temp.compareTo(BigInteger.ZERO) >= 0));
        
        return temp;
    }
}
